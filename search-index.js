var searchIndex = {};
searchIndex["optional"] = {"doc":"Space-efficient optional values","items":[[3,"IterBool","optional","iterate over an OptionBool",null,null],[3,"Optioned","","An `Option&lt;T&gt;`-like structure that takes only as much space as the enclosed\nvalue, at the cost of removing one particular `None` value from the value\ndomain (see `Noned`)",null,null],[3,"OptionedIter","","iterate over an Optioned&lt;T&gt;",null,null],[4,"OptionBool","","The `OptionBool` type, a space-efficient Option&lt;bool&gt; replacement",null,null],[13,"SomeTrue","","Some(true)",0,null],[13,"SomeFalse","","Some(false)",0,null],[13,"None","","None",0,null],[5,"some","","Create an `Optioned&lt;T&gt;` that is `some(t)`.",null,{"inputs":[{"name":"t"}],"output":{"name":"optioned"}}],[5,"none","","Create a `None Optioned&lt;T&gt;`. Note that the type must be inferrible\n from the context, or you&#39;d need to call with `::&lt;T&gt;` where `T` is\n the specific type.",null,{"inputs":[],"output":{"name":"optioned"}}],[5,"wrap","","Wrap a `T` into an `Optioned&lt;T&gt;`, regardless of its None-ness.",null,{"inputs":[{"name":"t"}],"output":{"name":"optioned"}}],[8,"Noned","","A trait whose implementation for any type `T` allows the use of\n`Optioned&lt;T&gt;` where `T` is bound by both `Sized` and `Copy`.",null,null],[10,"is_none","","Returns `true` if the contained value is the declared `None` for `T`,\n`false` otherwise.",1,null],[10,"get_none","","Returns the declared `None` value for `T`.",1,{"inputs":[],"output":{"name":"self"}}],[8,"OptEq","","Equality within Optioned",null,null],[10,"opt_eq","","Is the other optioned equal to this one?",2,null],[8,"OptOrd","","Ordering within Optioned",null,null],[10,"opt_cmp","","compare this Optioned with another",3,null],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"hash","","",0,null],[11,"deref","","",0,null],[11,"eq","","",0,null],[11,"index","","",0,null],[11,"partial_cmp","","",0,null],[11,"some","","Create a SomeTrue for true, SomeFalse for false",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"none","","Create a None value.",0,{"inputs":[],"output":{"name":"self"}}],[11,"is_some","","Returns true if the option is a Some value.",0,null],[11,"is_none","","Returns true if the option is a Some value.",0,null],[11,"expect","","Unwraps the contained bool, panics on None with given message.",0,null],[11,"unwrap","","Unwraps the contained bool, panics on None.",0,null],[11,"unwrap_or","","Returns the contained bool or a default.",0,null],[11,"unwrap_or_else","","Returns the contained bool or a computed default.",0,null],[11,"map","","Maps an `OptionBool` to an `Option&lt;U&gt;` by applying the function\n over the contained bool.",0,null],[11,"map_bool","","Maps an `OptionBool` to another `OptionBool` by applying the\n function over the contained bool.",0,null],[11,"map_or","","Maps a value to a `U` by applying the function or return a\n default `U`.",0,null],[11,"map_or_else","","Maps a value to a `U` by applying the function or return a\n computed default.",0,null],[11,"ok_or","","Transforms the `OptionBool` into a `Result&lt;bool, E&gt;`, mapping\n `Some`X to `Ok(`X`)` and `None` to `Err(err)`.",0,null],[11,"ok_or_else","","Transforms the `OptionBool` into a `Result&lt;bool, E&gt;`, mapping `Some`X to\n `Ok(`X`)` and `None` to a calculated `Err(err)`.",0,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,null],[11,"and_bool","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,null],[11,"and_then","","returns `None` if the `OptionBool` is `None`, otherwise calls `f` with\n the boolean value and returns the result as an `Option&lt;U&gt;`",0,null],[11,"and_then_bool","","returns `None` if the `OptionBool` is `None`, otherwise calls `f` with\n the boolean value and returns the result as an `OptionBool`",0,null],[11,"or","","Returns this as Option unless this is `None`, in which case returns\n `optb`.",0,null],[11,"or_bool","","Returns this as Option unless this is `None`, in which case returns\n `optb`.",0,null],[11,"or_else","","Returns this as Option unless this is `None`, in which case use the\n supplied function to calculate the result.",0,null],[11,"or_else_bool","","Returns this as Option unless this is `None`, in which case use the\n supplied function to calculate the result.",0,null],[11,"iter","","return an iterator over all contained (that is zero or one) values.",0,null],[11,"as_slice","","return a possibly empty slice with the contained value, if any.",0,null],[11,"take","","Takes the value out of the `OptionBool` and returns ist as\n `Option&lt;bool&gt;`, changing self to `None`.",0,null],[11,"take_bool","","Takes the value out of the `OptionBool`, changing self to `None`.",0,null],[11,"fmt","","",0,null],[11,"next","","",4,null],[11,"into_iter","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"optionbool"}}],[11,"from","","",0,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"partial_cmp","","",5,null],[11,"cmp","","",5,null],[11,"hash","","",5,null],[11,"some","","Create an `Optioned&lt;T&gt;` that is `some(t)`.",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"none","","Create an `Optioned&lt;T&gt;` that is `none()`.",5,{"inputs":[],"output":{"name":"self"}}],[11,"is_none","","Returns `true` if this `Optioned` is `None`, `false` otherwise.",5,null],[11,"is_some","","Returns `true` if this `Optioned` contains a value, `false` otherwise.",5,null],[11,"expect","","Unwraps the value, if any, else panics with the given message.",5,null],[11,"unwrap","","Unwraps the value, if any, else panics with &quot;unwrap called on None&quot;.",5,null],[11,"unpack","","Returns the contained value, even if None.",5,null],[11,"unwrap_or","","Returns the contained value or a default.",5,null],[11,"unwrap_or_else","","Returns the contained value or a calculated default.",5,null],[11,"map","","Maps the `Optioned` to an `Option&lt;U&gt;` by applying the function over the\n contained value, if any.",5,null],[11,"map_t","","Maps the `Optioned&lt;T&gt;` to an `Optioned&lt;U&gt;` by applying the function over\n the contained value, if any. Requires that the result type of the\n function be `Noned + Copy`, as other types aren&#39;t compatible with\n Optioned.",5,null],[11,"map_or","","Maps the contained value to a `U` by applying the function or return a\n default.",5,null],[11,"map_or_else","","Maps a value to a `U` by applying the function or return a computed\n default.",5,null],[11,"take","","Takes the value out of the `Optioned` and returns ist as\n `Option&lt;T&gt;`, changing self to `None`.",5,null],[11,"as_slice","","Return a possibly empty slice over the contained value, if any.",5,null],[11,"iter","","return an iterator over all contained (that is zero or one) values.",5,null],[11,"fmt","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"optioned"}}],[11,"clone","","",6,null],[11,"next","","",6,null],[11,"from","","",5,{"inputs":[{"name":"option"}],"output":{"name":"optioned"}}],[11,"from","","",5,{"inputs":[{"name":"option"}],"output":{"name":"optioned"}}],[11,"into","","",5,null]],"paths":[[4,"OptionBool"],[8,"Noned"],[8,"OptEq"],[8,"OptOrd"],[3,"IterBool"],[3,"Optioned"],[3,"OptionedIter"]]};
initSearch(searchIndex);
